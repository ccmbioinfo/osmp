name: "Node: build and push development image"
on:
  push:
    branches:
      - develop
    paths:
      - .github/workflows/node.yml
      - server/**
  pull_request:
    branches:
      - develop
    paths:
      - .github/workflows/node.yml
      - server/**

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: --debug
      - uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build development image
        uses: docker/build-push-action@v2
        with:
          context: server
          target: BUILD_IMAGE
          load: true
          tags: test-image
          pull: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      - name: Run eslint
        if: github.event_name == 'pull_request'
        run: |
          docker run --rm test-image yarn lint

      - name: Run prettier
        if: github.event_name == 'pull_request'
        run: |
          docker run --rm test-image yarn format

      - name: Run tests
        if: github.event_name == 'pull_request'
        run: |
          docker run --rm test-image yarn test

      - name: Meta action
        uses: docker/metadata-action@v3
        id: meta
        with:
          images: ghcr.io/${{ github.repository }}
          flavor: latest=${{ github.ref == 'refs/heads/master' }}
          tags: |
            type=ref,event=tag
            type=sha,format=long

      - name: Log in to registry
        uses: docker/login-action@v1
        if: github.event_name == 'push'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build and push development image
        if: github.event_name == 'push'
        uses: docker/build-push-action@v2
        with:
          context: server
          target: DEPLOY_IMAGE
          push: true
          tags: ghcr.io/ccmbioinfo/ssmp:dev

  deploy:
    runs-on: [cheo-ri]
    needs: build
    if: github.event_name == 'push'
    environment: SSMP_SERVER_DEV
    concurrency: SSMP_SERVER_DEV
    steps:
      - uses: actions/checkout@v2
      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Configure SSH
        id: configure
        # The self-hosted runner is not ephemeral, so we load the secret key into
        # an agent instead in memory. Keep track of it for further workflow steps
        # and so we can clean it up and not leave orphaned processes hanging around.
        #
        # https://docs.docker.com/engine/context/working-with-contexts/
        # This avoids passing an -H parameter to every Docker CLI call.
        run: |
          SSH_AGENT_EVAL=$(ssh-agent -s)
          eval "$SSH_AGENT_EVAL"
          ssh-add - <<< "${{ secrets.DEPLOY_PRIVATE_KEY }}"
          echo "::set-output name=ssh-agent-eval::$SSH_AGENT_EVAL"
          echo "::set-output name=ssh-agent-pid::$SSH_AGENT_PID"
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_HOST_KEY }}" > ~/.ssh/known_hosts
          chmod -R g-rwx,o-rwx ~/.ssh
          docker context create deploy-target --docker host=ssh://${{ secrets.DEPLOY_SSH_HOST }}
          docker context use deploy-target
      - name: Deploy
        # Even though this is deploying to a remote Docker Engine,
        # Compose uses the registry credentials of the client
        env:
          # Server
          COMPOSE_FILE: docker-compose.dev.yaml
          G4RD_AUTH_METHOD: ${{ secrets.G4RD_AUTH_METHOD }}
          G4RD_PASSWORD: ${{ secrets.G4RD_PASSWORD }}
          G4RD_URL: ${{ secrets.G4RD_URL }}
          G4RD_USERNAME: ${{ secrets.G4RD_USERNAME }}
          KEYCLOAK_AUTH_URL: ${{ secrets.KEYCLOAK_AUTH_URL }}
          KEYCLOAK_REALM: ${{ secrets.KEYCLOAK_REALM }}
          KEYCLOAK_CLIENT_ID: ${{ secrets.KEYCLOAK_CLIENT_ID }}
          MONGO_CONNECTION_STRING: ${{ secrets.MONGO_CONNECTION_STRING }}
          TEST_NODE_URL: ${{ secrets.TEST_NODE_URL }}
          # Test Node
          TEST_DATA_DB: ${{ secrets.TEST_DATA_DB }}
          TEST_DATA_DB_PORT: ${{ secrets.TEST_DATA_DB_PORT }}
          TEST_DATA_DB_HOST: ${{ secrets.TEST_DATA_DB_HOST }}
          TEST_DATA_DB_USER: ${{ secrets.TEST_DATA_DB_USER }}
          TEST_DATA_DB_PASSWORD: ${{ secrets.TEST_DATA_DB_PASSWORD }}
          # Test Node MySQL
          TEST_DATA_DB_ROOT_PASSWORD: ${{ secrets.TEST_DATA_DB_ROOT_PASSWORD }}
          # Keycloak
          KEYCLOAK_DB_ADDR: ${{ secrets.KEYCLOAK_DB_ADDR }}
          KEYCLOAK_DB: ${{ secrets.KEYCLOAK_DB }}
          KEYCLOAK_DB_USER: ${{ secrets.KEYCLOAK_DB_USER }}
          KEYCLOAK_DB_PASSWORD: ${{ secrets.KEYCLOAK_DB_PASSWORD }}
          # Mongo
          MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
          MONGO_INITDB_DATABASE: ${{ secrets.MONGO_INITDB_DATABASE }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}

        run: |
          eval "${{ steps.configure.outputs.ssh-agent-eval }}"
          docker-compose pull
          docker-compose up -d --remove-orphans
      - name: Clean up
        if: always()
        run: |
          docker context rm -f deploy-target
          eval "${{ steps.configure.outputs.ssh-agent-eval }}"
          SSH_AGENT_PID="${{ steps.configure.outputs.ssh-agent-pid }}" ssh-agent -k
